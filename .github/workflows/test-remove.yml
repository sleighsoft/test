name: "test-input-json"
on:
  workflow_dispatch:
    inputs:
      updated_appconfig:
        type: string
        description: JSON
        default: '{"id":"canaryf5","name":"canary","hash":"f5","enabled":false,"regions":{"us1":{"location":"centralus","stages":{"dev":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"test":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"uat":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"prod":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"connector":{"qc":{"type":"stonemont","name":"mock"},"dispatch":{"type":"command-alkon","name":"mock"},"batch":{"type":"command-alkon","name":"mock"}}}},"us2":{"location":"centralus","stages":{"dev":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"connector":{"qc":{"type":"stonemont","name":"mock"},"dispatch":{"type":"command-alkon","name":"mock"},"batch":{"type":"command-alkon","name":"mock"}}}},"eu1":{}}}'
        required: true
      existing_appconfig:
        type: string
        description: JSON
        default: '{"id":"canaryf5","name":"canary","hash":"f5","enabled":false,"regions":{"us1":{"location":"centralus","stages":{"dev":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"test":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"uat":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"prod":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"connector":{"qc":{"type":"stonemont","name":"mock"},"dispatch":{"type":"command-alkon","name":"mock"},"batch":{"type":"command-alkon","name":"mock"}}}},"us2":{"location":"centralus","stages":{"dev":{"data":{"resource_configuration":{"datmssqlserver":{"sku":"50"}}}},"connector":{"qc":{"type":"stonemont","name":"mock"},"dispatch":{"type":"command-alkon","name":"mock"},"batch":{"type":"command-alkon","name":"mock"}}}},"eu1":{}}}'
        required: true
      
permissions:
  contents: read
jobs:
  parse-json:
    runs-on: ubuntu-latest
    outputs:
      customer_id: ${{ steps.parse-customerid.outputs.customer_id }}
      regions: ${{ steps.parse-regions.outputs.regions }}
    steps:
      - name: parse-customerid
        id: parse-customerid
        run: |
          customer_id=$(echo '${{ inputs.json }}' | jq ".id" -r)
          echo "$customer_id"
          echo "customer_id=$customer_id" >> $GITHUB_OUTPUT
      - name: parse-regions
        id: parse-regions
        run: |
          regions=$(echo '${{ inputs.json }}' | jq ".regions | keys" -c)
          echo "$regions"
          echo "regions=$regions" >> $GITHUB_OUTPUT
  create-customer:
    needs: parse-json
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJSON(needs.parse-json.outputs.regions) }}
        stage: ["dev", "test", "uat", "prod", "connector"]
      fail-fast: false
    steps:
      - name: parse-region-stages
        id: parse-region-stages
        run: |
          region_stages=$(echo '${{ inputs.json }}' | jq ".regions | .${{ matrix.region }} | .stages | keys" -c)
          echo "$region_stages"
          echo "region_stages=$region_stages" >> $GITHUB_OUTPUT
      - name: checkout
        if: ${{ contains(fromJSON(steps.parse-region-stages.outputs.region_stages), matrix.stage) }}
        uses: actions/checkout@v4
      - name: parse-region-location
        if: ${{ contains(fromJSON(steps.parse-region-stages.outputs.region_stages), matrix.stage) }}
        id: parse-region-location
        run: |
          location=$(echo '${{ inputs.json }}' | jq ".regions | .${{ matrix.region }} | .location" -c)
          echo "$location"
          echo "location=$location" >> $GITHUB_OUTPUT
      - name: echo
        if: ${{ contains(fromJSON(steps.parse-region-stages.outputs.region_stages), matrix.stage) }}
        run: |
          echo "${{ needs.parse-json.outputs.customer_id }}"
          echo "${{ matrix.region }}"


# "c60-customer-${var.customer_id}-${var.region}-${each.key}"